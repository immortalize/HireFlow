// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  role         UserRole
  companyId    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company           Company?             @relation(fields: [companyId], references: [id])
  createdJobs       Job[]                @relation("JobCreator")
  applications      Application[]
  assessmentResults AssessmentResult[]
  onboardingProgress OnboardingProgress[]
  crmLeads          CRMLead[]            @relation("CRMLeadAssignedTo")
  crmPartners       CRMPartner[]         @relation("CRMPartnerAssignedTo")
  invitedUsers      UserInvitation[]     @relation("Inviter")
  receivedInvites   UserInvitation[]     @relation("Invitee")

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  logo        String?
  primaryColor String?  @default("#3B82F6")
  secondaryColor String? @default("#1E40AF")
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users              User[]
  jobs               Job[]
  crmLeads           CRMLead[]
  crmPartners        CRMPartner[]
  onboardingModules  OnboardingModule[]

  @@map("companies")
}

model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  requirements String?
  benefits    String?
  location    String?
  type        JobType  @default(FULL_TIME)
  salaryMin   Int?
  salaryMax   Int?
  isActive    Boolean  @default(true)
  companyId   String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company      Company       @relation(fields: [companyId], references: [id])
  createdBy    User          @relation("JobCreator", fields: [createdById], references: [id])
  applications Application[]

  @@map("jobs")
}

model Application {
  id                      String              @id @default(cuid())
  candidateId             String
  jobId                   String
  status                  ApplicationStatus   @default(APPLIED)
  fitQuestionnaireResponses Json?
  coverLetter             String?
  resume                  String?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relations
  candidate         User                @relation(fields: [candidateId], references: [id])
  job               Job                 @relation(fields: [jobId], references: [id])
  assessments       Assessment[]

  @@map("applications")
}

model Assessment {
  id            String        @id @default(cuid())
  type          AssessmentType
  questionsBank Json
  applicationId String
  timeLimit     Int?          // in minutes
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  application        Application        @relation(fields: [applicationId], references: [id])
  assessmentResults  AssessmentResult[]

  @@map("assessments")
}

model AssessmentResult {
  id              String   @id @default(cuid())
  assessmentId    String
  candidateId     String
  score           Float?
  answers         Json
  proctoringData  Json?
  timeSpent       Int?     // in seconds
  completedAt     DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id])
  candidate  User       @relation(fields: [candidateId], references: [id])

  @@map("assessment_results")
}

model CRMLead {
  id        String     @id @default(cuid())
  name      String
  email     String
  phone     String?
  status    LeadStatus @default(NEW)
  source    String?
  notes     String?
  assignedToId String?
  companyId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  assignedTo User?   @relation("CRMLeadAssignedTo", fields: [assignedToId], references: [id])
  company    Company @relation(fields: [companyId], references: [id])

  @@map("crm_leads")
}

model CRMPartner {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  type      PartnerType
  status    PartnerStatus @default(ACTIVE)
  notes     String?
  assignedToId String?
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedTo User?   @relation("CRMPartnerAssignedTo", fields: [assignedToId], references: [id])
  company    Company @relation(fields: [companyId], references: [id])

  @@map("crm_partners")
}

model OnboardingModule {
  id          String   @id @default(cuid())
  title       String
  content     String
  contentType ContentType
  order       Int
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company             Company              @relation(fields: [companyId], references: [id])
  onboardingProgress  OnboardingProgress[]

  @@map("onboarding_modules")
}

model OnboardingProgress {
  id         String   @id @default(cuid())
  userId     String
  moduleId   String
  status     ProgressStatus @default(NOT_STARTED)
  completedAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user   User             @relation(fields: [userId], references: [id])
  module OnboardingModule @relation(fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
  @@map("onboarding_progress")
}

model UserInvitation {
  id        String   @id @default(cuid())
  email     String
  role      UserRole
  companyId String
  inviterId String
  inviteeId String?
  token     String   @unique
  expiresAt DateTime
  acceptedAt DateTime?
  createdAt DateTime @default(now())

  // Relations
  inviter User? @relation("Inviter", fields: [inviterId], references: [id])
  invitee User? @relation("Invitee", fields: [inviteeId], references: [id])

  @@map("user_invitations")
}

// Enums
enum UserRole {
  EMPLOYER
  HR_MANAGER
  HIRING_MANAGER
  BUSINESS_DEV
  CANDIDATE
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  ASSESSMENT
  INTERVIEW
  OFFER
  HIRED
  REJECTED
}

enum AssessmentType {
  COGNITIVE
  ENGLISH
  SITUATIONAL_JUDGMENT
  FIT_CHECK
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum PartnerType {
  RECRUITER
  CONSULTANT
  VENDOR
  CLIENT
}

enum PartnerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
}

enum ContentType {
  TEXT
  VIDEO
  PDF
  QUIZ
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}
